#!/bin/sh

# jailrun:
#   Wrapper to run a firejailed graphical application, inside an optional
#   firejailed desktop environment (window manager, panel, systray) inside
#   a per-environment Xephyr Xserver instance.
#   (originally based on https://spwhitton.name/blog/entry/firejailskype/)
#
# Copyright © 2017,2018 Rowan Thorpe <rowan@rowanthorpe.com>
#
# Any additional contributions are noted in the AUTHORS.md file.

# This file is part of jailrun.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

## config

version=0.1.1
home="${HOME}"; test -n "${home}" || home=~; home="${home%%/}"
scriptname="${0##*/}"
conf_dir='/etc/firejail'
desktop_components='window_manager panel tray' # ensure these are in sensible order of execution (e.g. window_manager first)
#shellcheck disable=2034
must_launch_x=1

verbose_def=0
debug_def=0
log_file_def='/dev/stdout'
screen_size_def='1920x1080'
shell_def=0
child_def='xterm'
for _c in ${desktop_components}; do
    # so any undefined ones below default to "nothing"
    eval "${_c}"'_def='
done
#shellcheck disable=2034
window_manager_def='openbox' # awesome, stumpwm, ...
#shellcheck disable=2034
panel_def='tint2' # fbpanel, lxpanel, ...
#shellcheck disable=2034
tray_def='' # trayer, wmsystemtray, ...

verbose=
debug=
log_file=
screen_size=
shell=
child=
for _c in ${desktop_components}; do
    eval "${_c}=__UNDEFINED__"
done

profile=
wait_exec=
sleep_time=
display=
for _c in child ${desktop_components}; do
    eval "${_c}_pids="
done

## functions

_ltrim() { sed -e '1s/^ \+//'; }
_rtrim() { sed -e '$s/ \+$//'; }
_trim() { _ltrim | _rtrim; }
_esc_pipe() { sed -e "s/'/'\\\\''/g"; }
_wrap_pipe() { printf "'"; _esc_pipe; printf "'"; }
_wrap() { printf '%s' "${1}" | _wrap_pipe; }
_rev() { printf '%s\n' "${*}" | tr ' ' '\n' | tac | tr '\n' ' '; }
#shellcheck disable=2059
_die() { printf "${@}" | sed -e "s/^/${scriptname}: /" >&2; exit 1; }
_is_writable() {
    if test -e "${1}"; then
        test -f "${1}" && test -w "${1}"
    else
        _dir="$(dirname "${1}")" && test -x "${_dir}" && test -w "${_dir}"
    fi
}
_is_executable() { _cmd="$(command -v "${1}")" && test -x "${_cmd}"; }
_is_coordinate() { printf %s "${1}" | grep -q '^[0-9]\+x[0-9]\+$'; }
_is_profilename() { test -s "${conf_dir}/${1}.profile"; }
_is_number() { printf %s "${1}" | grep -q '^[0-9]\+\(\.[0-9]\+\)\?$'; }
_is_nonempty() { test -n "${1}"; }
_check() {
    _n="${1}"
    _x="${2}"
    shift 2
    for _c do
        if ! ${_c} "${_x}"; then
            _die '"%s" failed the "is %s" check for %s.\n' "${_x}" "${_c#_is_}" "${_n}"
            return 1
        fi
    done
    return 0
}
_getopts() {
    for _c in ${desktop_components}; do
        eval '
            _short_'"${_c}"'="$(printf %s "${_c}" | cut --bytes=1)"
            _long_'"${_c}"'="$(printf %s "${_c}" | sed -e "s/_/-/g")"
        '
    done
    while test ${#} -ne 0; do
        eval '
        case "${1}" in
            '"$(
                for _c in ${desktop_components}; do
                    eval 'printf -- "|-%c|--%s" "${_short_'"${_c}"'}" "${_long_'"${_c}"'}"'
                done | cut --bytes=2-
            )"')
                test -z "${2}" || _check "${1}" "${2}" _is_executable
                for _c in ${desktop_components}; do
                    eval '\''
                        case "${1}" in
                            -${_short_'\''"${_c}"'\''}|--${_long_'\''"${_c}"'\''})
                                #shellcheck disable=2082
                                '\''"${_c}"'\''="${2}"
                                shift 2
                                break
                                ;;
                        esac
                    '\''
                done
                continue
                ;;
        esac
        '
        case "${1}" in
            -h|--help|--usage)
                cat <<EOF
Usage: jailrun [OPTIONS] [--] 'CMD'
Run a firejailed graphical application, inside an optional firejailed desktop
environment (window manager, panel, systray) inside a firejailed per-environment
Xephyr Xserver instance.

 OPTIONS:
  -h, --help              This message.
  -V, --version           Show version of this wrapper.
  -v, --verbose           Show program output.
  -d, --debug             Display each command before executing.
  -l, --log-file X        Filename to log to.
                          (def: ${log_file_def})
  -x, --screen-size X     Pass '--xephyr-screen=[X]' to firejail.
                          (def: ${screen_size_def})
  -s, --shell             Pass the CMD arg as '/bin/sh -c [..]' rather than just
                          executing it. If you background anything here without
                          'nohup' or 'setsid' be sure to have a 'wait' at the end
                          to avoid early exit.
EOF
                for _c in ${desktop_components}; do
                    _shortflag="$(printf %s "${_c}" | cut --bytes=1)"
                    _longflag="$(printf %s "${_c}" | sed -e 's/_/-/g')"
                    _propername="$(printf %s "${_shortflag}" | tr '[:lower:]' '[:upper:]'; printf %s "${_c}" | cut --bytes=2- | sed -e 's/_/ /g')"
                    _linestart="  -${_shortflag}, --${_longflag} X"
                    _spacer="$(printf '%*c' $(( 27 - $(printf '%s' "${_linestart}" | wc --bytes))) '')"
                    printf '%s%s%s command to run (empty string to disable).\n' "${_linestart}" "${_spacer}" "${_propername}"
                    printf "                          It is run as '[X] &' to start, and "
                    case "${_c}" in
                        window_manager)
                            printf "'[X] --exit'"
                            ;;
                        *)
                            printf 'killed by pid'
                            ;;
                    esac
                    printf ' to stop.\n'
                    eval 'printf "                          (def: %s)\\n" "${'"${_c}"'_def:-[none]}"'
                done
                    cat <<EOF
  -P, --profile X         Pass '--profile=${conf_dir}/[X].profile' to firejail.
  -W, --wait-exec X Y     Either if the application command/commandline fully
                          daemonizes a process (leaves the process group) making
                          'wait' useless against early exit, or if you just want
                          the firejailed desktop-environment to hold-off exiting
                          until some external process exits, poll instead every
                          [Y] seconds until the pid of 'pgrep --full --exact [X]'
                          disappears. Note that any contrived example I could
                          find for fully daemonizing in a way firejail couldn't
                          "wait" for (e.g. using setsid, backgrounded, inside a
                          subprocess) caused its firejail to bail out anyway. If
                          you find a usable example of that please let me know
                          so I can add it below.

 CMD:
  Application to run inside the firejail. With '-s' you can make this arg an
  entire commandline-as-a-string which will be passed to /bin/sh.
  (def: ${child_def}).

 EXAMPLES:
  jailrun
   [runs firejailed default executable inside a firejailed desktop-environment,
    using default window-manager, panel, and systray]

  jailrun --panel '' --tray '' --shell 'xclock & xeyes & xterm'
   [runs 3 firejailed executables inside a firejailed desktop-environment,
    using default window-manager, with no panel or systray]

  jailrun --window-manager '' --panel '' --tray ''
   [runs firejailed default executable with no desktop environment]

Home page: https://github.com/rowanthorpe/jailrun
EOF
                    exit 0
                ;;
            -V|--version)
                cat <<EOF
jailrun ${version}
Copyright © 2017,2018 Rowan Thorpe

License GPLv3+: GNU GPL 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF
                exit 0
                ;;
            -v|--verbose)
                verbose=1; shift
                ;;
            -v*)
                verbose=1; _arg1="-${1#-v}"; shift; set -- "${_arg1}" "${@}"
                ;;
            -d|--debug)
                debug=1; shift
                ;;
            -d*)
                debug=1; _arg1="-${1#-d}"; shift; set -- "${_arg1}" "${@}"
                ;;
            -l|--log-file)
                _check "${1}" "${2}" _is_nonempty _is_writable; log_file="${2}"; shift 2
                ;;
            -x|--screen-size)
                _check "${1}" "${2}" _is_nonempty _is_coordinate; screen_size=${2}; shift 2
                ;;
            -s|--shell)
                shell=1; shift
                ;;
            -s*)
                shell=1; _arg1="-${1#-s}"; shift; set -- "${_arg1}" "${@}"
                ;;
            -P|--profile)
                _check "${1}" "${2}" _is_nonempty _is_profilename; profile=${2}; shift 2
                ;;
            -W|--wait-exec)
                _check "${1}" "${2}" _is_nonempty; wait_exec="${2}"; _check "${1}" "${3}" _is_nonempty _is_number; sleep_time=${3}; shift 3
                ;;
            --)
                shift; break
                ;;
            -*)
                _die 'Unknown optflag "%s"\n' "${1}"
                ;;
            *)
                break
                ;;
        esac
    done
    if test ${#} -gt 1; then
        _die 'Too many commandline args specified (should be 1, if specifying a commandline quote it as a string).\n'
    else
        child="${1}"
    fi
}
_defaults_and_coercions() {
    verbose=${verbose:-${verbose_def}}
    debug=${debug:-${debug_def}}
    log_file="${log_file:-${log_file_def}}"
    screen_size="${screen_size:-${screen_size_def}}"
    shell=${shell:-${shell_def}}
    for _c in ${desktop_components}; do
        eval 'test "x${'"${_c}"'}" = '\''x__UNDEFINED__'\'' && '"${_c}"'="${'"${_c}"'_def}"'
    done
    child="${child:-${child_def}}"
    if test ${shell} -eq 1; then
        if test -z "${profile}"; then
            profile="${child%% *}"
            _is_profilename "${profile}" || profile='default'
        fi
        child="sh -c $(_wrap "${child}")"
    fi
    prefix="firejail --shell=none"
#shellcheck disable=2034
    desktop_prefix="${prefix} --net=none --join-or-start=wm${$}"
#shellcheck disable=2034
    x_args="--xephyr-screen=${screen_size} --x11=xephyr"
}
_pwait() {
    # wait for ${wait_exec} pid if specified, otherwise nohupped children pids
    for _p do
        while test -d "/proc/${_p}"; do
            sleep "${sleep_time}"
        done
    done
}
_pkill() {
    if test ${#} -ne 0; then
        _pids=${*}
        for _s in TERM INT KILL; do
            # shellcheck disable=2086
            set -- ${_pids}
            test ${#} -eq 0 && break
            /bin/sleep 0.75
            _pids=$(
                for _p do
                    if test -d "/proc/${_p}"; then
                        printf %d "${_p}"
                    else
                        continue
                    fi
                    kill -${_s} "${_p}"
                done
            )
        done
    fi
}
__get_pid_tree() {
    if test ${#} -ne 0; then
        #shellcheck disable=2086
        for _p do printf '\n%d' ${_p}; done
        #shellcheck disable=2046
        __get_pid_tree $(pgrep --parent $(printf %s "${*}" | tr -s ' ' ',') | tr '\n' ' ')
    fi
}
_get_pid_tree() { __get_pid_tree "${@}" | tail -n +2 | sort -u; }
_get_pid_tree_h() { _get_pid_tree "${@}" | tr -s '\n' ' ' | _trim; }
_get_pids() {
    # NB: This convoluted method is to catch pids of processes which have been
    #     nohup-ed or other semi-daemon voodoo, even in the "desktop environment"
    #     executables ("children" which do this can be waited for with --wait-exec)
    if test -n "${wait_exec}" && test "x${1}" = 'xchild'; then
        eval "${1}"'_pids=$(pgrep --full --exact "${wait_exec}" | tr \\n " ")'
    else
        _pids="$(pgrep --pgroup ${$})" # separate step to minimize pollution of pgrep output
        eval "${1}"'_pids=$(
            _get_pid_tree_h $(
                printf %s "${_pids}" | grep -v "^${$}$(
                    for _not in $(printf "%s child" "${desktop_components}" | sed -e "s/\\<${1}\\>//"); do
                        eval '\''
                            for _p in ${'\''"${_not}"'\''_pids}; do
                                printf "\\|%s" "${_p}"
                            done
                        '\''
                    done
                )\$" | tr -s \\n " "
            )
        )'
    fi
}
_get_display() {
    while /bin/sleep 0.2; do
        display="$(firemon --x11 --name=wm$$ 2>/dev/null | sed -n -e 's/^ \+DISPLAY \+//' -e tP -e b -e :P -e p -e q || :)"
        test -n "${display}" && break
    done
}
_doit() {
    test ${debug} -eq 0 || printf '\n ==> %s\n' "$(_wrap "${1}")"
    if test ${verbose} -eq 1; then
        eval "${1}"
    else
        eval "${1}" >/dev/null 2>&1
    fi
}

exit_trap() {
    #shellcheck disable=2086
    for _c in child $(_rev ${desktop_components}); do
        case "${_c}" in
            window_manager)
                eval 'test -z "${display}" || _doit "DISPLAY=\"${display}\" ${desktop_prefix} ${'"${_c}"'} --exit"'
                ;;
            *)
                eval 'test -z "${'"${_c}"'_pids}" || _doit "_pkill ${'"${_c}"'_pids}"'
                ;;
        esac
    done
}
setup() {
    _getopts "${@}"
    _defaults_and_coercions
    exec </dev/null >"${log_file}" 2>&1
    # ensure the app we're about to run gets closed even after it doesn't respond to signals sanely
    for _sig in HUP INT QUIT TERM; do
        trap 'exit_trap; trap - '"${_sig}"' EXIT; kill -'"${_sig}"' ${$}' ${_sig}
    done
    trap 'exit_trap' EXIT
}
do_start() {
    for _arg do
        eval '
            if test -n "${'"${_arg}"'}"; then
                case "${_arg}" in
                    window_manager)
                        _doit "${desktop_prefix} ${must_launch_x:+${x_args}} ${'"${_arg}"'} &"
                        ;;
                    child)
                        _doit "$(test -z "${must_launch_x}" && printf '\''DISPLAY="%s" '\'' "${display}")${prefix} ${must_launch_x:+${x_args}} ${profile:+--profile=${conf_dir}/${profile}.profile} ${'"${_arg}"'}"
                        ;;
                    *)
                        _doit "$(test -z "${must_launch_x}" && printf '\''DISPLAY="%s" '\'' "${display}")${desktop_prefix} ${must_launch_x:+${x_args}} ${'"${_arg}"'} &"
                        ;;
                esac
                /bin/sleep 2
                _get_pids "${_arg}"
                if test -n "${must_launch_x}"; then
                    must_launch_x=
                    _get_display
                fi
            fi
        '
    done
}
child_wait() {
    if test -n "${child_pids}"; then
        if test -n "${wait_exec}"; then
            _doit "_pwait ${child_pids}"
        else
            _doit "wait ${child_pids}"
        fi
        child_pids=
    fi
}

## main

setup "${@}"
#shellcheck disable=2086
do_start ${desktop_components} child
child_wait
